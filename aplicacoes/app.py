#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aplica√ß√£o Web para Demonstra√ß√£o do Modelo CARF
Hackathon CARF 2024

Esta aplica√ß√£o permite testar o modelo de machine learning
que prev√™ probabilidades de aprova√ß√£o dos processos no CARF.
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="CARF ML Predictor",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .prediction-box {
        background-color: #f0f2f6;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
        margin: 1rem 0;
    }
    .metric-box {
        background-color: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
        margin: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_model_and_preprocessors():
    """Carrega o modelo e os pr√©-processadores salvos"""
    try:
        # Carregar modelo
        model = joblib.load('modelo_carf_rf.pkl')
        
        # Carregar pr√©-processadores
        with open('preprocessors.pkl', 'rb') as f:
            preprocessors = pickle.load(f)
        
        return model, preprocessors
    except FileNotFoundError as e:
        st.error(f"Arquivo n√£o encontrado: {e}")
        st.info("Execute primeiro o notebook para treinar e salvar o modelo.")
        return None, None

def prever_probabilidades_carf(texto_ementa, tributo, turma, model, preprocessors):
    """
    Fun√ß√£o para prever probabilidades usando o modelo carregado
    """
    try:
        # Extrair componentes
        le_tributo = preprocessors['le_tributo']
        le_turma = preprocessors['le_turma']
        tfidf = preprocessors['tfidf']
        tributos_frequentes = preprocessors['tributos_frequentes']
        
        # Preparar dados de entrada
        texto_clean = str(texto_ementa)[:1000] if texto_ementa else ""
        
        # Codificar tributo
        tributo_codificado = tributo if tributo in tributos_frequentes else 'OUTROS'
        tributo_encoded = le_tributo.transform([tributo_codificado])[0]
        
        # Codificar turma
        turma_simplificada = str(turma).split('¬™')[0] + '¬™' if '¬™' in str(turma) else 'OUTROS'
        turma_encoded = le_turma.transform([turma_simplificada])[0]
        
        # Criar embedding TF-IDF
        texto_tfidf = tfidf.transform([texto_clean]).toarray()
        
        # Combinar features
        X_input = np.hstack([[tributo_encoded, turma_encoded], texto_tfidf[0]])
        X_input = X_input.reshape(1, -1)
        
        # Fazer predi√ß√£o
        probabilidades = model.predict_proba(X_input)[0]
        
        # Criar resultado
        resultado = {}
        for i, classe in enumerate(model.classes_):
            resultado[classe] = probabilidades[i]
        
        return resultado, None
        
    except Exception as e:
        return None, str(e)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # T√≠tulo principal
    st.markdown('<h1 class="main-header">‚öñÔ∏è CARF ML Predictor</h1>', unsafe_allow_html=True)
    st.markdown("### Predi√ß√£o de Probabilidades de Aprova√ß√£o no Conselho Administrativo de Recursos Fiscais")
    
    # Carregar modelo
    with st.spinner("Carregando modelo..."):
        model, preprocessors = load_model_and_preprocessors()
    
    if model is None or preprocessors is None:
        st.stop()
    
    # Sidebar com informa√ß√µes
    st.sidebar.markdown("## üìä Sobre o Modelo")
    st.sidebar.info("""
    Este modelo foi treinado com dados de 2024 do CARF e utiliza:
    - **Random Forest** para classifica√ß√£o
    - **TF-IDF** para an√°lise de texto das ementas
    - **Features categ√≥ricas** (tributo, turma)
    """)
    
    st.sidebar.markdown("## üéØ Tipos de Vota√ß√£o")
    st.sidebar.markdown("""
    - **Un√¢nime**: Todos os conselheiros concordam
    - **Maioria**: Maioria dos conselheiros concorda
    - **Qualidade**: Decis√£o por voto de qualidade
    """)
    
    # Formul√°rio principal
    st.markdown("## üìù Dados do Processo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Sele√ß√£o de tributo
        tributos_disponiveis = [
            "IRPF - IMPOSTO SOBRE A RENDA DA PESSOA F√çSICA",
            "IRPJ - IMPOSTO SOBRE A RENDA DA PESSOA JUR√çDICA", 
            "COFINS - CONTRIBUI√á√ÉO PARA O FINANCIAMENTO DA SEGURIDADE SOCIAL",
            "CS - CONTRIBUI√á√ïES PREVIDENCI√ÅRIAS",
            "CSLL - CONTRIBUI√á√ÉO SOCIAL SOBRE O LUCRO L√çQUIDO",
            "IRRF - IMPOSTO SOBRE A RENDA RETIDO NA FONTE",
            "OUTROS-V - OUTROS VINCULADOS - COM√âRCIO EXTERIOR"
        ]
        
        tributo_selecionado = st.selectbox(
            "Selecione o tipo de tributo:",
            tributos_disponiveis
        )
    
    with col2:
        # Sele√ß√£o de turma
        turmas_disponiveis = [
            "1¬™ TE-1¬™SE√á√ÉO-1001-CARF-MF-DF",
            "2¬™ TE-1¬™SE√á√ÉO-1002-CARF-MF-DF", 
            "01¬™ TO-02¬™C√ÇMARA-02¬™SE√á√ÉO-CARF-MF-DF",
            "02¬™ TO-02¬™CAMARA-02¬™SE√á√ÉO-CARF-MF-DF",
            "03¬™ TURMA-CSRF-CARF-MF-DF",
            "1¬™ TE-3¬™SE√á√ÉO-3001-CARF-MF-DF"
        ]
        
        turma_selecionada = st.selectbox(
            "Selecione a turma:",
            turmas_disponiveis
        )
    
    # Campo de texto para ementa
    texto_ementa = st.text_area(
        "Digite o texto da ementa:",
        height=200,
        placeholder="Exemplo: Assunto: Imposto sobre a Renda de Pessoa F√≠sica - IRPF. Ano-calend√°rio: 2009. PROCESSO ADMINISTRATIVO FISCAL..."
    )
    
    # Bot√£o de predi√ß√£o
    if st.button("üîÆ Prever Probabilidades", type="primary"):
        if texto_ementa.strip():
            with st.spinner("Processando predi√ß√£o..."):
                probabilidades, erro = prever_probabilidades_carf(
                    texto_ementa, 
                    tributo_selecionado, 
                    turma_selecionada,
                    model,
                    preprocessors
                )
            
            if erro:
                st.error(f"Erro na predi√ß√£o: {erro}")
            else:
                # Exibir resultados
                st.markdown("## üìä Resultados da Predi√ß√£o")
                
                # Criar gr√°fico de barras
                fig = px.bar(
                    x=list(probabilidades.keys()),
                    y=list(probabilidades.values()),
                    title="Probabilidades de Aprova√ß√£o por Tipo de Vota√ß√£o",
                    labels={'x': 'Tipo de Vota√ß√£o', 'y': 'Probabilidade'},
                    color=list(probabilidades.values()),
                    color_continuous_scale='Blues'
                )
                
                fig.update_layout(
                    yaxis_tickformat='.1%',
                    height=400,
                    showlegend=False
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Exibir m√©tricas
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        "Un√¢nime",
                        f"{probabilidades.get('Un√¢nime', 0):.1%}",
                        delta=None
                    )
                
                with col2:
                    st.metric(
                        "Maioria", 
                        f"{probabilidades.get('Maioria', 0):.1%}",
                        delta=None
                    )
                
                with col3:
                    st.metric(
                        "Qualidade",
                        f"{probabilidades.get('Qualidade', 0):.1%}",
                        delta=None
                    )
                
                # Predi√ß√£o principal
                predicao_principal = max(probabilidades, key=probabilidades.get)
                confianca = max(probabilidades.values())
                
                st.markdown(f"""
                <div class="prediction-box">
                    <h3>üéØ Predi√ß√£o Principal</h3>
                    <p><strong>Tipo de Vota√ß√£o:</strong> {predicao_principal}</p>
                    <p><strong>Confian√ßa:</strong> {confianca:.1%}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Informa√ß√µes adicionais
                st.markdown("## ‚ÑπÔ∏è Informa√ß√µes do Processo")
                st.info(f"""
                **Tributo:** {tributo_selecionado}  
                **Turma:** {turma_selecionada}  
                **Ementa:** {texto_ementa[:100]}...
                """)
        else:
            st.warning("Por favor, digite o texto da ementa para fazer a predi√ß√£o.")
    
    # Se√ß√£o de exemplos
    st.markdown("---")
    st.markdown("## üí° Exemplos de Uso")
    
    exemplo_col1, exemplo_col2 = st.columns(2)
    
    with exemplo_col1:
        if st.button("üìã Exemplo 1: IRPF"):
            st.session_state.exemplo_texto = """
            Assunto: Imposto sobre a Renda de Pessoa F√≠sica - IRPF
            Ano-calend√°rio: 2009
            PROCESSO ADMINISTRATIVO FISCAL. APRESENTA√á√ÉO DOCUMENTAL. MOMENTO OPORTUNO. 
            IMPUGNA√á√ÉO. EXCE√á√ïES TAXATIVAS. PRECLUS√ÉO.
            De acordo com o art. 16, inciso III, do Decreto 70.235, de 1972, os atos 
            processuais se concentram no momento da impugna√ß√£o, cujo teor dever√° abranger 
            "os motivos de fato e de direito em que se fundamenta, os pontos de discord√¢ncia, 
            as raz√µes e provas que possuir, considerando-se n√£o impugnada a mat√©ria que n√£o 
            tenha sido expressamente contestada pelo impugnante.
            """
            st.session_state.exemplo_tributo = "IRPF - IMPOSTO SOBRE A RENDA DA PESSOA F√çSICA"
            st.session_state.exemplo_turma = "1¬™ TE-1¬™SE√á√ÉO-1001-CARF-MF-DF"
    
    with exemplo_col2:
        if st.button("üìã Exemplo 2: COFINS"):
            st.session_state.exemplo_texto = """
            ASSUNTO: CONTRIBUI√á√ÉO PARA O FINANCIAMENTO DA SEGURIDADE SOCIAL (COFINS)
            Per√≠odo de apura√ß√£o: 01/07/2004 a 30/09/2004
            COFINS. N√ÉO CUMULATIVIDADE. RESSARCIMENTO. CORRE√á√ÉO MONET√ÅRIA APLICA√á√ÉO DA SELIC. 
            POSSIBILIDADE.
            Conforme decidido no julgamento do REsp 1.767.945/PR, realizado sob o rito dos 
            recursos repetitivos, √© devida a corre√ß√£o monet√°ria no ressarcimento de cr√©dito 
            escritural da n√£o cumulatividade acumulado ao final do trimestre, ap√≥s escoado 
            o prazo de 360 dias para a an√°lise do correspondente pedido administrativo pelo Fisco.
            """
            st.session_state.exemplo_tributo = "COFINS - CONTRIBUI√á√ÉO PARA O FINANCIAMENTO DA SEGURIDADE SOCIAL"
            st.session_state.exemplo_turma = "03¬™ TURMA-CSRF-CARF-MF-DF"
    
    # Aplicar exemplo se selecionado
    if hasattr(st.session_state, 'exemplo_texto'):
        texto_ementa = st.session_state.exemplo_texto
        tributo_selecionado = st.session_state.exemplo_tributo
        turma_selecionada = st.session_state.exemplo_turma
        st.rerun()

if __name__ == "__main__":
    main()
